package acm2018;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class f2012
{
	public static void main(String[] args) throws IOException
	{
		StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
		while(in.nextToken()!=StreamTokenizer.TT_EOF)
		{
			int n=(int) in.nval;
			in.nextToken();
			for(int a=0;a<n;a++)
			{
				int people=(int) in.nval;
				in.nextToken();
				people+=(int) in.nval;
				in.nextToken();
				int[][] relation=new int[people][people];
				for(int b=0;b<relation.length;b++)
				{
					Arrays.fill(relation[b],0);
				}
				Map<String,Integer> name=new HashMap();
				int party=(int) in.nval;
				in.nextToken();
				int number=0;
				for(int b=0;b<people;b++)
				{
					String namet=String.valueOf(in.nval);
					in.nextToken();
					if(name.get(namet)==null)
					{
						name.put(namet,number);
						number++;
					}
					int temp=(int) in.nval;
					in.nextToken();
					for(int c=0;c<temp;c++)
					{
						String name1=String.valueOf(in.nval);
						in.nextToken();
						if(name.get(name1)==null)
						{
							name.put(name1, number);
							number++;
						}
						relation[name.get(namet)][name.get(name1)]=1;
					}
				}
				for(int b=0;b<party;b++)
				{
					int temp=(int) in.nval;
					in.nextToken();
					String[] arr=new String[temp];
					ArrayList<String> end=new ArrayList();
					for(int c=0;c<temp;c++)
					{
						arr[c]=String.valueOf(in.nval);
						in.nextToken();
						end.add(arr[c]);
					}
					number=0;
					while(number<arr.length)
					{
						for(int i=0;i<arr.length;i++)
						{
							if(i!=number)
							{
								if(relation[name.get(arr[i])][name.get(arr[number])]!=1)
								{
									end.remove(arr[i]);
									if(end.size()==0)break;
								}else if(relation[name.get(arr[number])][name.get(arr[i])]==1)
								{
									end.remove(arr[i]);
								}
							}
							if(end.size()==0)break;
						}
						number++;
					}
					if(end.size()==0)
					{
						System.out.println(0);
					}else if(end.size()==1)
					{
						System.out.println(1+" "+end.get(0));
					}
				}
			}
			System.out.println();
		}
		out.flush();
	}
}